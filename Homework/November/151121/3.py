import random

average_counter = 0
for i in range(10):
    counter = 0
    # Список выпадения орлов и решек
    lst = []
    # Симуляция бросания монетки
    while "ООО" not in lst and "РРР" not in lst:
        coin = random.choice(['eagle', 'tails'])
        # Проверка на выпадение орла или решки
        if coin == 'eagle':
            lst += "О"
        else:
            lst += "Р"
        # Соединение элементов списка, чтобы цикл while смог их проверить
        lst = "".join(lst)
        # Счёт кол-ва попыток
        counter += 1
        average_counter += 1
    print(f"{' '.join([str(i) for i in lst])} (Попыток: {counter})")
print(f'Среднее количество попыток: {average_counter / 10}')
# Я не смог придумать более лёгкого способа решения задачи. Если он есть, напишите, его пожалуйста в комментарии к коду.

# Evaluation: OK
# Я бы решил очень тупо: создал две переменные -- для текущего значения монетки и для предыдущего.
# Если текущее == предыдущему, увеличиваем счётчик. Когда счётчик == 3, это финиш. Если !=, то обнуляем счётчик, и всё
# заново.
# Ниже привожу код, который получился на мини-допах, где разбирали задание с теми, у кого не получалось совсем.

'''
import random

counter = 0
coin = 5
previous_coin = 7
attempts = 0
sum_attempts = 0
for i in range(10):  # Делаем 10 серий
    # Повторяем, пока не выпадет 3 одинаковых значения
    while counter < 2:
        coin = random.randint(0, 1)
        # Какое значение выводим на экран
        if coin == 0:
            print("Р", end=" ")
        else:
            print("О", end=" ")
        # Увеличиваем счётчик или обнуляем, в зависимости от того, совпадает значение с предыдущим или нет
        if coin == previous_coin:
            counter += 1
        else:
            counter = 0
        previous_coin = coin
        attempts += 1  # Складываем количество попыток
    print("(попыток:", attempts, ')')  # Выводим количество попыток
    sum_attempts += attempts  # Складываем общее число попыток
    counter = 0
    attempts = 0
print("Среднее количество попыток:", sum_attempts / 10)  # Выводим среднее количество попыток
'''