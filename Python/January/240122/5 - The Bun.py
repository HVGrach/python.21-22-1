"""В русской народной сказке "Колобок" песенка Колобка повторяется при каждой
встрече с очередным животным после слов "Колобок-колобок, я тебя съем!". При каждом повторении
упоминаются все предыдущие существа, от которых Колобок уже "ушёл", и добавляется новое, от которого
он только собирается сбежать.

Напишите функцию bunSong, которая получает на вход имя существа, подставляет его в песенку,
и выводит на экран. Список существ задаётся заранее вне функции. Программа итерируется по списку,
и прогоняет его через функцию для вывода всех куплетов песенки.

Hint:
Используйте отдельный список для хранения строк про животных, от которых уже ушёл главный герой.
Для добавления нового элемента в список используйте метод .append;

-> .append method
Добавляет указанный элемент в конец списка.
list.append(x) -> None
x -- Элемент, который требуется добавить в список.
    my_list = []
    my_list.append(1)
    my_list  # [1]
    my_list.append(3)
    my_list  # [1, 3]
"""


# функция, возвращающая реплики перед песней и начальные строки, общие для
# всех куплетов.
# creature - существо в И.п., с которым общается Колобок
def couplet_start_lines(creature):
    return [
        "Катится Колобок, а навстречу ему %s:" % creature,
        "— Колобок, Колобок! Я тебя съем!",
        "— Не ешь меня, %s! Я тебе песенку спою, — сказал колобок и запел:" % creature,
        "Я Колобок, Колобок!",
        "Я по коробу скребен,",
        "По сусеку метен,",
        "На сметане мешон,",
        "Да в масле пряжон,",
        "На окошке стужон;",
        "Я от дедушки ушел,",
        "Я от бабушки ушел,",
    ]


# функция, возвращающая финальные строки, общие для всех куплетов.
# creature - существо в И.п., с которым общается Колобок
# gender - пол существа
def couplet_end_lines(creature, gender):
    return [
        "От тебя, %s, подавно уйду!" % creature,
        "И покатился по дороге - только %s его и %s!" % (
            creature, "видела" if gender == "F" else "видел")
    ]


# функция, возвращающая дополнительную строку к куплету Колобка
# creature_genitive - существо в Р.п., от которого ушёл Колобок
def couplet_additional_line(creature_genitive):
    return "Я от %s ушел," % creature_genitive


# функция, формирующая куплет Колобка при общении и дополняющая будущий куплет
# creature - информация о существе, с которым общается Колобок
# (имя в И.п., имя в Р.п., пол)
# couplet_mid_lines - строки куплета, в которых говорится,
# от кого уже ушёл Колобок
def bun_song(creature, couplet_mid_lines):
    creature_nom = creature[0]      # имя существа в И.п.
    creature_gen = creature[1]      # имя существа в Р.п.
    creature_gender = creature[2]   # пол

    # собираем весь куплет
    couplet = "\n".join(
        couplet_start_lines(creature_nom) + couplet_mid_lines +
        couplet_end_lines(creature_nom, creature_gender))
    # добавляем строчку о том, что Колобок ушёл и от текущего существа
    # для будущего куплета
    couplet_mid_lines.append(couplet_additional_line(creature_gen))
    return couplet


def main():
    creatures = [
        ("заяц", "зайца", "M"),
        ("волк", "волка", "M"),
        ("медведь", "медведя", "M"),
        ("лиса", "лисы", "F")
    ]
    couplet_mid_lines = []
    for creature in creatures:
        print(bun_song(creature, couplet_mid_lines) + "\n")


if __name__ == '__main__':
    main()
